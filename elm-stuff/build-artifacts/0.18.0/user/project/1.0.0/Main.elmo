var _user$project$Main$formatPlate = function (plate) {
	var validPlateNumbers = '1234567890';
	var isValidPlateNumber = function ($char) {
		return A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$fromChar($char),
			validPlateNumbers);
	};
	var filteredPlateNumbers = A2(
		_elm_lang$core$String$filter,
		isValidPlateNumber,
		A3(_elm_lang$core$String$slice, 3, 8, plate));
	var validPlateChars = 'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm';
	var isValidPlateChar = function ($char) {
		return A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$fromChar($char),
			validPlateChars);
	};
	var filteredPlateChars = A2(
		_elm_lang$core$String$filter,
		isValidPlateChar,
		A3(_elm_lang$core$String$slice, 0, 3, plate));
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$String$length(
			A2(_elm_lang$core$Basics_ops['++'], filteredPlateChars, filteredPlateNumbers)),
		3) > 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$String$toUpper(filteredPlateChars),
		A2(_elm_lang$core$Basics_ops['++'], '-', filteredPlateNumbers)) : _elm_lang$core$String$toUpper(filteredPlateChars);
};
var _user$project$Main$titleDiv = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _user$project$Styles$styles(_user$project$Styles$titleStyle),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('IndieRank'),
		_1: {ctor: '[]'}
	});
var _user$project$Main$resultDiv = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _user$project$Main$titleDiv,
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Styles$styles(_user$project$Styles$subtitleStyle),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('RESULTS'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _user$project$Styles$styles(_user$project$Styles$infoTextStyle),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('No results found for this driver yet.'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _user$project$Styles$styles(
								A2(_elm_lang$core$Basics_ops['++'], _user$project$Styles$buttonEnabledStyle, _user$project$Styles$smallMarginTopStyle)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Add review'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$validPlate = function (plate) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$String$length(plate),
		8);
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {plate: a, isSearching: b, failedToGetRatings: c, failedDetails: d, searchResult: e, showResults: f};
	});
var _user$project$Main$SearchResult = F2(
	function (a, b) {
		return {plate: a, ratings: b};
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A6(
		_user$project$Main$Model,
		'',
		false,
		false,
		'',
		A2(
			_user$project$Main$SearchResult,
			'',
			{ctor: '[]'}),
		false),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Rating = F2(
	function (a, b) {
		return {score: a, comment: b};
	});
var _user$project$Main$decodeRating = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Main$Rating,
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'score',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$int),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'comment',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$string));
var _user$project$Main$decodeRatings = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Main$SearchResult,
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'plate',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$field,
		'ratings',
		_elm_lang$core$Json_Decode$list(_user$project$Main$decodeRating)));
var _user$project$Main$ShowRating = function (a) {
	return {ctor: 'ShowRating', _0: a};
};
var _user$project$Main$getRatings = function (plate) {
	var url = 'http://localhost:9393/fake';
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Main$decodeRatings);
	return A2(_elm_lang$http$Http$send, _user$project$Main$ShowRating, request);
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'ChangePlate':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{plate: _p0._0, failedToGetRatings: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Search':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{isSearching: true, failedToGetRatings: false}),
					_1: _user$project$Main$getRatings('abc1234')
				};
			default:
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{isSearching: false, failedToGetRatings: false, searchResult: _p0._0._0, showResults: true}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								isSearching: false,
								failedToGetRatings: true,
								failedDetails: _elm_lang$core$Basics$toString(_p0._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$Main$Search = {ctor: 'Search'};
var _user$project$Main$ChangePlate = function (a) {
	return {ctor: 'ChangePlate', _0: a};
};
var _user$project$Main$searchForm = F5(
	function (plate, isSearching, failedToGetRatings, failedDetails, searchResult) {
		var formatedPlate = _user$project$Main$formatPlate(plate);
		var isSearchDisabled = !_user$project$Main$validPlate(plate);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$form,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onSubmit(_user$project$Main$Search),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$Main$titleDiv,
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Styles$styles(
										A2(_elm_lang$core$Basics_ops['++'], _user$project$Styles$smallMarginBottomStyle, _user$project$Styles$smallMarginTopStyle)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$autofocus(true),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$disabled(isSearching),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$placeholder('Type the plate here'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$ChangePlate),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$maxlength(8),
															_1: {
																ctor: '::',
																_0: _user$project$Styles$styles(_user$project$Styles$plateInputStyle),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$value(formatedPlate),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$core$String$isEmpty(formatedPlate) ? _user$project$Styles$styles(_user$project$Styles$plateEmptyInputStyle) : _user$project$Styles$styles(
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: isSearching ? A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$disabled(true),
										_1: {
											ctor: '::',
											_0: _user$project$Styles$styles(_user$project$Styles$buttonDisabledStyle),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('searching...'),
										_1: {ctor: '[]'}
									}) : (_user$project$Main$validPlate(formatedPlate) ? A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$disabled(false),
										_1: {
											ctor: '::',
											_0: _user$project$Styles$styles(_user$project$Styles$buttonEnabledStyle),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('search'),
										_1: {ctor: '[]'}
									}) : A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$disabled(true),
										_1: {
											ctor: '::',
											_0: _user$project$Styles$styles(_user$project$Styles$buttonDisabledStyle),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('search'),
										_1: {ctor: '[]'}
									})),
								_1: {
									ctor: '::',
									_0: failedToGetRatings ? A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$Styles$styles(_user$project$Styles$errorStyle),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_elm_lang$core$Basics_ops['++'], 'Failed to retrieve data. Details: ', failedDetails)),
											_1: {ctor: '[]'}
										}) : A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _user$project$Styles$styles(_user$project$Styles$errorStyle),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(''),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _user$project$Styles$styles(
				A2(_elm_lang$core$Basics_ops['++'], _user$project$Styles$marginTopStyle, _user$project$Styles$centeredBlockStyle)),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: model.showResults ? _user$project$Main$resultDiv : A5(_user$project$Main$searchForm, model.plate, model.isSearching, model.failedToGetRatings, model.failedDetails, model.searchResult),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
